'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Login = function () {
    function Login($element) {
        _classCallCheck(this, Login);

        var t = this;

        t.$page = $('#tpl-login');
        t.$ = $element;
        t.$logo = t.$.find('.page-login__logo');
        t.$menu = t.$.find(".menu-connect");
        t.$buttonsShowForm = t.$menu.find('li');
        t.$form = t.$.find(".block-form");
        t.$buttonSubmit = t.$.find('.block-form__item--submit');
        t.$formContainer = t.$.find('.block-connect__container-form');
        t.$illuBottom = t.$.find('.page-login__bg-bot');

        t.isAnimating = false;

        t.domaine = "http://charline-laporte.fr/areka/api/";

        t.hasError = false;

        t.init();
        t.bindEvents();
    }

    _createClass(Login, [{
        key: 'init',
        value: function init() {
            var t = this;

            // selectionne onglet
            t.$buttonsShowForm.eq(1).addClass('selected');

            // prépare les formulaires
            TM.set(t.$form, { zIndex: -1, opacity: 0, display: "none" });
            TM.set(t.$form.eq(0), { zIndex: 1, opacity: 1, display: "block" });
            t.$form.eq(0).addClass('active');

            // set la taille du container form
            var formH = t.$form.eq(0).innerHeight();
            TM.set(t.$formContainer, { height: formH });
        }
    }, {
        key: 'bindEvents',
        value: function bindEvents() {
            var t = this;

            t.$buttonsShowForm.on('click', function (e) {

                if (t.isAnimating) return null;

                t.isAnimating = true;

                t.changeForm($(e.target));
            });

            t.$buttonSubmit.on('click', function (e) {

                // annule le comportement par défault
                e.preventDefault();

                // ce que je récupère
                var $form = $(e.target).parents('.block-form');
                var url = $form.attr('action');
                var formID = $form.attr('id');

                var obj = { url: url, formID: formID

                    // envoi pour l'ajax
                };t.sendForm(obj);
            });
        }
    }, {
        key: 'changeForm',
        value: function changeForm($element) {
            var t = this;

            // les éléments que je récupère
            var formID = $element.attr('data-form');
            var $form = $("#" + formID);

            var $currentForm = t.$form.filter('.active');

            // prépare animation changement de form
            TM.set($form.find('.block-form__item'), { opacity: 0, y: 20 });
            TM.set($form, { zIndex: 1, opacity: 1, display: "block" });

            // calcule différence de taille
            var currentFormH = $currentForm.innerHeight();
            var formH = $form.innerHeight();

            var addH = formH - currentFormH;
            var illuBot = addH > 0 ? addH : 0;

            t.$buttonsShowForm.removeClass('selected');

            // prépare la timeline
            var timeline = new TL({
                paused: true,
                onComplete: function onComplete() {

                    // changement des forms
                    TM.set($currentForm, { zIndex: -1, opacity: 0, display: "none" });

                    $currentForm.removeClass('active');
                    $form.addClass('active');

                    // ajout de la class hover
                    t.$buttonsShowForm.addClass('selected');
                    $element.removeClass('selected');

                    // enleve le flag
                    t.isAnimating = false;
                }
            });

            timeline.staggerTo($currentForm.find('.block-form__item'), 0.5, { opacity: 0, y: 20, ease: Power4.easeOut }, 0.1, "-=0.25");

            timeline.to(t.$formContainer, 0.25, { height: formH, ease: Power4.easeOut }, "-=0.25");

            timeline.to(t.$page, 0.25, { height: "+=" + addH, ease: Power4.easeOut }, "-=0.15");

            timeline.to(t.$illuBottom, 0.25, { bottom: -illuBot, ease: Power4.easeOut }, "-=0.15");

            timeline.staggerTo($form.find('.block-form__item'), 0.5, { opacity: 1, y: 0, ease: Power4.easeOut }, 0.1, "-=0.25", "-=0.10");

            // lance la timeline + SCROLL TOP
            $("html, body").animate({ scrollTop: 0 }, 1000);
            timeline.play(0);
        }
    }, {
        key: 'sendForm',
        value: function sendForm(obj) {
            var t = this;

            var data = $("#" + obj.formID).serializeArray();

            $.ajax({
                url: t.domaine + obj.url,
                crossDomain: true,
                method: "GET",
                data: data,
                beforeSend: function beforeSend() {

                    console.log('FAIRE ANIMATION ENVOI AJAX');
                },
                success: function success(response) {

                    var data = JSON.parse(response);

                    if (data.status === "error") t.errorMissingFields();else t.logUser(data.id);
                },
                error: function error(xhr, status, _error) {

                    console.error(xhr);
                }
            });
        }
    }, {
        key: 'errorMissingFields',
        value: function errorMissingFields() {
            var t = this;

            var $currentForm = t.$form.filter('.active');

            // reset des classes
            $currentForm.find('.block-form__item').removeClass("error");

            // ajoute les classes
            $currentForm.find('.block-form__item').each(function () {

                if ($(this).val().trim() === "") $(this).addClass("error");
            });

            if (t.hasError) return null;

            t.hasError = true;

            // agrandi le block
            var errorH = $currentForm.find('.block-form__error').outerHeight(true);

            TM.set($currentForm.find('.block-form__error'), { display: "block", height: "0" });

            //affiche le message
            var timeline = new TL({
                paused: true
            });

            timeline.to($currentForm, 0.5, { height: $currentForm.height() + errorH, ease: Power4.easeOut }, 0);

            timeline.to(t.$formContainer, 0.5, { height: t.$formContainer.height() + errorH, ease: Power4.easeOut }, 0);

            timeline.to(t.$illuBottom, 0.5, { bottom: -errorH, ease: Power4.easeOut }, 0);

            timeline.to($currentForm.find('.block-form__error'), 0.5, { opacity: 1, ease: Power4.easeOut }, "-=0.25");

            timeline.play(0);
        }
    }, {
        key: 'logUser',
        value: function logUser(id) {
            var t = this;

            console.log('OK USER LOGGED IN');

            // enregistrer dans le local storage
            localStorage.setItem("user_id", id);

            var logoH = window.innerHeight * 0.50;

            // animation changement de page
            var timeline = new TL({
                paused: true,
                onComplete: function onComplete() {

                    // redirige vers la page principale
                    document.location.href = "app.html";
                }
            });

            // effacement de éléments
            timeline.staggerTo(t.$page.find('.remove-load-page'), 0.25, { opacity: 0, y: 20, ease: Power4.easeOut }, "-0.10");

            timeline.to(t.$logo, 0.5, { height: logoH, lineHeight: logoH + "px", ease: Power4.easeOut });

            timeline.to(t.$logo.find('img'), 0.5, { scale: 0.8, ease: Power4.easeOut }, "+=0.25");

            timeline.to(t.$logo.find('img'), 0.5, { scale: 1.20, ease: Power4.easeOut });

            timeline.play(0);
        }
    }]);

    return Login;
}();
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Main = function () {
    function Main() {
        _classCallCheck(this, Main);

        var t = this;

        t.screen = 1;
        t.screenW = window.innerWidth + 1;
        t.$screenContainer = $(".page-main__screen-container");
        t.$screenMenuItems = $(".main-menu__item");

        t.$popUpScanOk = $(".scan-pop-up");
        t.$popUpInfos = $(".infos-pop-up");

        t.$flowersQuantity = $(".table-graines__quantity");

        t.$progressInfos = $(".progress__bottom");
        t.$progressBar = $(".progress__bar");
        t.$progressBarLevels = t.$progressBar.find('.progress__level');

        t.$updateGrams = $('.update-grams');

        t.$updateTaille = $('.to-update.size');

        t.$updateReclydedPaper = $('.to-update.paper-recycled');

        t.$updateWater = $('.to-update.water');

        t.$updateEnergy = $('.to-update.energy');

        t.$updatePollution = $('.to-update.pollution');

        t.$updateAnimation = $(".screen-flower__animation img");
        t.$containerAnimation = $(".screen-flower__animation");

        t.$linksTop = $(".links-top__item");

        t.$boxComm = $(".boxes-comm__bot");

        t.$transition = $("#transition");
        t.$wrapper = $("#wrapper");

        t.$buttonReset = $("#button-reset");

        t.$burgerIcon = $("#burger-icon");
        t.$burgerNav = $(".burger__item");
        t.$burger = $(".burger");
        t.$burgerContent = $(".burger__content");
        t.$burgerContentContainer = $(".burger__content-container");

        t.isAnimating = false;

        t.$screenFlower = $('.screen-flower');
        t.maxScroll = t.$screenFlower.find(".screen-flower__top").innerHeight() + t.$screenFlower.find(".screen-flower__scroll").innerHeight() - $(window).innerHeight() - 1;
        t.$arrowMenu = $(".main-menu__arrow");

        t.qrCodesScanned = [];

        t.$popUpInfoButtons = $('.bt-open-pop-up-infos');
        t.popUpInfoTexts = [{
            subtitle: "Sais-tu qu’il faut 300 litres d’eau pour fabriquer 1kg de papier blanc ? ",
            text: "Mais pour produire 1 kg de papier recyclé, il ne faut que 3 litres d’eau, soit cent fois moins que du papier blanc. Par exemple, en recyclant 5kg de papier, tu sauves 285 litres d’eau. \n" + "L’eau est une ressource importante pour la production de papier, et ton action permet de la préserver."
        }, {
            subtitle: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. ",
            text: "Nullam quis aliquet dui. In ac ipsum ut elit sodales dignissim. Proin in est ultrices, porttitor magna a, fringilla nulla. Nam justo nisl, posuere ac enim eget, pharetra sagittis orci. Curabitur lacinia risus eget odio facilisis ornare."
        }, {
            subtitle: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. ",
            text: "Nullam quis aliquet dui. In ac ipsum ut elit sodales dignissim. Proin in est ultrices, porttitor magna a, fringilla nulla. Nam justo nisl, posuere ac enim eget, pharetra sagittis orci. Curabitur lacinia risus eget odio facilisis ornare."
        }, {
            subtitle: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. ",
            text: "Nullam quis aliquet dui. In ac ipsum ut elit sodales dignissim. Proin in est ultrices, porttitor magna a, fringilla nulla. Nam justo nisl, posuere ac enim eget, pharetra sagittis orci. Curabitur lacinia risus eget odio facilisis ornare."
        }];

        t.comm = ["comm1", "comm2", "comm3"];

        t.init();
        t.bindEvents();
    }

    _createClass(Main, [{
        key: "init",
        value: function init() {
            var t = this;

            // scroll top

            // TODO : à remettre pour build
            t.prepareScanner();

            if (t.screen === 0) t.startScreenScan();

            new planteSliderIllu();

            t.Map = new Map($("#map-container"));

            t.progressFlower();

            t.scrollMagic();

            t.initBurger();

            t.initCommercants();
        }
    }, {
        key: "initCommercants",
        value: function initCommercants() {
            var t = this;

            $('.tpl-comm').each(function () {
                new SingleCommercant($(this));
            });
        }
    }, {
        key: "initBurger",
        value: function initBurger() {
            var t = this;

            t.$burgerContent.eq(0).css("opacity", "1");
            t.$burgerContent.eq(0).css("z-index", "0");
        }
    }, {
        key: "bindEvents",
        value: function bindEvents() {
            var t = this;

            // navigation swipe
            document.addEventListener('swiped-right', function (e) {

                // soit commercant soit écrans
                if ($('.commercant.open').length > 0) t.swipeComm(-1);else {
                    if (t.screen === 0 || $(e.target).parents('.no-swipe').length > 0 || $(e.target).hasClass('no-swipe')) return null;
                    t.swipeScreen(-1);
                }
            });

            // navigation swipe
            document.addEventListener('swiped-left', function (e) {

                // soit commercant soit écrans
                if ($('.commercant.open').length > 0) t.swipeComm(1);else {
                    if (t.screen === 2 || $(e.target).parents('.no-swipe').length > 0 || $(e.target).hasClass('no-swipe')) return null;
                    t.swipeScreen(1);
                }
            });

            // navigation click
            t.$screenMenuItems.on('click', function (event) {

                var indexClick = $(event.target).parents(".main-menu__item").index();

                if (indexClick === t.screen) return null;

                var direction = indexClick - t.screen;

                t.swipeScreen(direction);
            });

            // popup infos
            t.$popUpInfoButtons.on('click', t.openPopUpInfos.bind(t));

            // fleches ecran fleur
            t.$screenFlower.on('scroll', t.bottomCheck.bind(t));

            // ouvertur boxes commercants
            t.$boxComm.on('click', function () {
                var id = $(this).attr('data-id');

                t.openCom(id);
            });

            // menu du burger
            t.$burgerNav.on('click', function (event) {

                var $element = $(event.target).parents(".burger__item");

                if (!$element.hasClass('selected') && !t.isAnimating) t.showContentBurger($element);
            });

            // buger icon
            t.$burgerIcon.on('click', t.clickBurger.bind(t));

            // profil
            t.$buttonReset.on("click", t.resetApp.bind(t));
        }
    }, {
        key: "clickBurger",
        value: function clickBurger() {
            var t = this;

            if (t.$burger.hasClass('open')) t.closeBurger();else t.openBurger();
        }
    }, {
        key: "openBurger",
        value: function openBurger() {
            var t = this;

            // si cachée on affiche
            t.$arrowMenu.show();

            // prépare les élements
            TM.set(t.$burger.find('.burger__bg img'), { y: -170 });
            TM.set(t.$burgerContent.eq(0).find('.to-animate'), { opacity: 0, y: 20 });

            t.$burgerContent.eq(0).show();

            t.$burger.addClass("open");

            // animation
            var timeline = new TL({
                paused: true,
                onStart: function onStart() {
                    t.$linksTop.addClass('light');
                }
            });

            timeline.to(t.$burger.find('.burger__bg img'), 0.5, { y: 0, ease: Power4.easeOut });

            timeline.staggerTo(t.$burgerContent.eq(0).find('.to-animate'), 0.5, { opacity: 1, y: 0 }, 0.1, "-=0.25");

            timeline.play(0);
        }
    }, {
        key: "closeBurger",
        value: function closeBurger() {
            var t = this;

            t.$linksTop.removeClass('light');

            t.$burger.toggleClass("open");

            // reset
            t.initBurger();
            t.$burgerNav.removeClass("selected");
            t.$burgerNav.eq(0).addClass("selected");

            TM.set(t.$burgerContent, { opacity: 0, zIndex: -1 });
            TM.set(t.$burgerContent.eq(0), { opacity: 1, zIndex: 0 });

            t.$burgerContent.hide();
            t.$burgerContent.eq(0).show();
        }
    }, {
        key: "scrollMagic",
        value: function scrollMagic() {
            var t = this;

            t.elementController = new ScrollMagic.Controller({
                globalSceneOptions: {
                    reverse: false
                }
            });

            var $elements = $('.sm-block-top');

            $elements.each(function () {

                var $element = $(this);

                var triggerHook = $element.attr('data-start') ? Number($element.attr('data-start')) : 0.7;

                TM.set($element, { opacity: 0, y: 40 });

                var timeline = new TimelineMax({
                    delay: 0,
                    onCompleteParams: [$element],
                    onComplete: function onComplete() {
                        $element.addClass('loaded');
                    }
                });

                var _s = new ScrollMagic.Scene({
                    triggerElement: $($element).get(0),
                    triggerHook: triggerHook,
                    duration: 0
                }).setTween(timeline).addTo(t.elementController);

                timeline.to($element, 0.5, {
                    y: 0,
                    opacity: 1,
                    ease: Power2.easeOut
                });
            });
        }
    }, {
        key: "swipeScreen",
        value: function swipeScreen(direction) {
            var t = this;

            if (t.$burger.hasClass('open')) t.closeBurger();

            // pour l'animation
            var currentLeft = Number(t.$screenContainer.css('left').replace('px', ''));

            // si scan activé on l'enlève
            if (t.screen === 0) t.resetScan();

            // si carte on reset
            if (t.screen === 2) t.resetMap();

            // update screen
            t.screen += direction;

            // changement dans le menu
            t.$screenMenuItems.removeClass("selected");
            t.$screenMenuItems.eq(t.screen).addClass("selected");

            // animation screen
            TM.to(t.$screenContainer, 0.5, { left: currentLeft - direction * t.screenW, ease: Power4.easeOut, onComplete: function onComplete() {

                    // en fonction du screen lance les fonctions correspondantes
                    if (t.screen === 0) t.startScreenScan();

                    // map : popup + menu
                    if (t.screen === 2) t.startScreenMap();else t.$arrowMenu.show();
                } });
        }
    }, {
        key: "prepareScanner",
        value: function prepareScanner() {
            var t = this;

            QRScanner.prepare();
            QRScanner.cancelScan();
            QRScanner.hide();
        }
    }, {
        key: "startScreenMap",
        value: function startScreenMap() {
            var t = this;

            // menu clair
            t.$linksTop.addClass('light');

            // enlève la flèche
            t.$arrowMenu.hide();

            // affiche la popup s'il faut
            if (localStorage.getItem("map-opened") !== "true") {
                new Popup($(".map-pop-up"));
                localStorage.setItem("map-opened", true);
            }
        }
    }, {
        key: "resetMap",
        value: function resetMap() {
            var t = this;

            t.$linksTop.removeClass('light');

            // si scan activé on l'enlève
            if (t.screen === 0) t.resetScan();
            t.Map.resetMap();
            t.Map.resetScroll();
        }
    }, {
        key: "resetScan",
        value: function resetScan() {
            var t = this;

            QRScanner.cancelScan();
            QRScanner.hide();
            t.$linksTop.removeClass('light');
        }
    }, {
        key: "startScreenScan",
        value: function startScreenScan() {
            var t = this;

            t.$linksTop.addClass('light');
            t.$arrowMenu.hide();

            QRScanner.show();

            QRScanner.scan(t.codeFound.bind(t));
        }
    }, {
        key: "codeFound",
        value: function codeFound(err, url) {
            var t = this;

            setTimeout(function () {

                // si erreur
                if (!err) {

                    // TODO : alert à mettre dans une pop up
                    var isAreka = url.indexOf('http://charline-laporte.fr/areka') >= 0;
                    var id = url.slice('http://charline-laporte.fr/areka?id='.length, url.indexOf('&'));

                    // si mauvais QR CODE
                    if (!isAreka) alert("Oups il semblerait que ce QR Code ne vous permette pas de faire grandir votre plante. N'oubliez pas ramener du papier ;) ");

                    // si déjà scanné
                    else if (t.qrCodesScanned.indexOf(id) >= 0) alert("Oups il semblerait que ce QR Code a déjà été scanné :) ");

                        // si ok
                        else t.showInfoScan(url).bind(t);
                }
            }, 1000);
        }
    }, {
        key: "showInfoScan",
        value: function showInfoScan(url) {
            var t = this;

            // récupère les informations
            var id = url.slice('http://charline-laporte.fr/areka?id='.length, url.indexOf('&'));
            var g = t.getGrammesValue(url);
            var flower = t.getFlowerValue(url);

            // invalide le QR Code
            t.qrCodesScanned.push(id);

            // remplir la pop up dans l'écran fleur
            t.$popUpScanOk.find('.to-update.grammes').text(g);
            t.$popUpScanOk.find('.to-update.flower').text(flower);

            var $bgFlower = t.$popUpScanOk.find('.scan-pop-up__icon--flower .scan-pop-up__icon-text p');
            $bgFlower.removeAttr("class");
            $bgFlower.addClass(flower);

            t.$popUpScanOk.find('.scan-pop-up__icon--flower img').attr("src", "img/flowers/" + flower + ".svg");

            // remplir la barre de progress
            var newProgress = Number(localStorage.getItem("flower-level")) + 1;
            localStorage.setItem("flower-level", newProgress.toString());

            // remplir les grammes
            var newGrammes = Number(localStorage.getItem("flower-grammes")) + g;
            localStorage.setItem("flower-grammes", newGrammes.toString());

            // remplir la collection
            var $currentQuantity = t.$flowersQuantity.filter('.' + flower).find('.to-update');
            var current = Number($currentQuantity.text());

            $currentQuantity.text(current + 1);

            // retourne à l'écran fleur
            t.swipeScreen(1);

            // fait poper la pop up avcec un léger délais
            t.popup = new Popup(t.$popUpScanOk, true);
        }
    }, {
        key: "getGrammesValue",
        value: function getGrammesValue(url) {
            var t = this;

            var gIndex = url.indexOf('g=') + 2;

            var ampIndex = null;

            for (var i = 0; i <= url.length; i++) {
                if (url[i] === "&") ampIndex = i;
            }return Number(url.slice(gIndex, ampIndex)) / 1000;
        }
    }, {
        key: "getFlowerValue",
        value: function getFlowerValue(url) {
            var t = this;

            var flowerIndex = url.lastIndexOf('=') + 1;

            return url.slice(flowerIndex, url.length);
        }
    }, {
        key: "openPopUpInfos",
        value: function openPopUpInfos(event) {
            var t = this;

            var $buttonClicked = $(event.target);
            var indexButton = $buttonClicked.parents(".benefits__row").index() - 1;

            // change le texte dans la popup
            t.$popUpInfos.find('.sub-title').text(t.popUpInfoTexts[indexButton].subtitle);
            t.$popUpInfos.find('.text').text(t.popUpInfoTexts[indexButton].text);
            t.$popUpInfos.find('.title').text($buttonClicked.parents(".benefits__row").find('.left').text());

            // lance la popup
            new Popup($('.infos-pop-up'));
        }
    }, {
        key: "bottomCheck",
        value: function bottomCheck() {
            var t = this;

            var srollY = t.$screenFlower.scrollTop();

            if (srollY >= t.maxScroll) TM.to(t.$arrowMenu.find('svg'), 0.5, { rotation: 180, ease: Power4.easeOut });

            if (srollY <= 1) TM.to(t.$arrowMenu.find('svg'), 0.5, { rotation: 0, ease: Power4.easeOut });
        }
    }, {
        key: "progressFlower",
        value: function progressFlower() {
            var t = this;

            if (localStorage.getItem("flower-level") === undefined) localStorage.setItem("flower-level", "0");else t.updateProgress();
        }
    }, {
        key: "updateProgress",
        value: function updateProgress() {
            var t = this;

            var progress = Number(localStorage.getItem("flower-level"));
            var g = Number(localStorage.getItem("flower-grammes"));

            // 1 - remplir la barre de progress
            var timelineProgressBare = new TL({ paused: true });

            // première barre
            if (progress >= 0 && progress <= 5) {
                if (progress !== 0) t.$progressBarLevels.eq(0).parents(".progress__top").find('.progress__xp').eq(0).addClass("passed");
                timelineProgressBare.to(t.$progressBarLevels.eq(0).find(".progress__to-animate"), 0.5, { width: 20 * progress * 46 / 100, ease: Power4.easeOut });
            } else {
                t.$progressBarLevels.eq(0).parents(".progress__top").find('.progress__xp').eq(0).addClass("passed");
                timelineProgressBare.to(t.$progressBarLevels.eq(0).find(".progress__to-animate"), 0.5, { width: 46, ease: Power4.easeOut });
            }

            // deuxième barre
            if (progress >= 5 && progress < 10) {
                t.$progressBarLevels.eq(1).parents(".progress__top").find('.progress__xp').eq(1).addClass("passed");
                timelineProgressBare.to(t.$progressBarLevels.eq(1).find(".progress__to-animate"), 0.5, { width: 20 * (progress - 5) * 46 / 100, ease: Power4.easeOut });
            } else if (progress >= 10) {
                t.$progressBarLevels.eq(1).parents(".progress__top").find('.progress__xp').eq(1).addClass("passed");
                timelineProgressBare.to(t.$progressBarLevels.eq(1).find(".progress__to-animate"), 0.5, { width: 46, ease: Power4.easeOut });
            }

            // troisième barre
            if (progress >= 10 && progress < 15) {
                t.$progressBarLevels.eq(2).parents(".progress__top").find('.progress__xp').eq(2).addClass("passed");
                timelineProgressBare.to(t.$progressBarLevels.eq(2).find(".progress__to-animate"), 0.5, { width: 20 * (progress - 10) * 46 / 100, ease: Power4.easeOut });
            } else if (progress >= 15) {
                t.$progressBarLevels.eq(2).parents(".progress__top").find('.progress__xp').eq(2).addClass("passed");
                timelineProgressBare.to(t.$progressBarLevels.eq(2).find(".progress__to-animate"), 0.5, { width: 46, ease: Power4.easeOut });
            }

            // dernière barre
            if (progress > 15) {
                t.$progressBarLevels.eq(3).parents(".progress__top").find('.progress__xp').eq(3).addClass("passed");
                timelineProgressBare.to(t.$progressBarLevels.eq(3).find(".progress__to-animate"), 0.5, { width: 20 * (progress - 15) * 46 / 100, ease: Power4.easeOut });
            }

            timelineProgressBare.play(0);

            // 2 - Remplir jauge ronde
            $(".benefits-me__illu--levels path").each(function () {

                if ($(this).index() + 1 <= progress) $(this).addClass('progress');
            });

            // 3 - Changer la taille de la fleur
            if (progress < 5) t.$updateTaille.text("0.2");else if (progress >= 5 && progress < 10) t.$updateTaille.text("5.2");else if (progress >= 10 && progress < 15) t.$updateTaille.text("7.3");else t.$updateTaille.text("8.1");

            // 4 - Update des grammes
            t.$updateGrams.each(function () {

                var currentText = $(this).text();

                var current = null;

                if (currentText.indexOf("K") > 0) current = t.removeKNumber(currentText);else current = Number(currentText);

                $(this).text(t.round(current + g));
            });

            // 6 - Produit en Croix

            // papier recyclé 1000kg PB = 900kg PR
            t.$updateReclydedPaper.each(function () {

                var currentText = $(this).text();

                var current = null;

                if (currentText.indexOf("K") > 0) current = t.removeKNumber(currentText);else current = Number(currentText);

                var next = (current + g) * 900 / 1000;
                $(this).text(t.round(next));
            });

            // eau : 5kg = 285L
            t.$updateWater.each(function () {

                var currentText = $(this).text();

                // CURRENT
                var current = null;

                if (currentText.indexOf("K") > 0) current = t.removeKNumber(currentText);else current = Number(currentText);

                $(this).text(t.round(current + 12));
            });

            // énergie : 1000kg = 2500kW
            t.$updateEnergy.each(function () {

                var currentText = $(this).text();

                var current = null;

                if (currentText.indexOf("K") > 0) current = t.removeKNumber(currentText);else current = Number(currentText);

                $(this).text(t.round(current + 50));
            });

            // polution : random
            t.$updatePollution.each(function () {

                var current = Number($(this).text());
                $(this).text(current - 1);
            });

            //  change la date de dépose
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth() + 1;
            var yyyy = today.getFullYear();

            if (dd < 10) dd = '0' + dd;
            if (mm < 10) mm = '0' + mm;

            today = mm + '/' + dd + '/' + yyyy;

            localStorage.setItem("flower-last-day", today.toString());

            App.quickActions();

            // lance animation de la fleur
            t.animation(progress);
        }
    }, {
        key: "animation",
        value: function animation(progress) {
            var t = this;

            if (progress < 5) {

                t.$containerAnimation.empty();

                t.$containerAnimation.append("<img src='img/animation/etat1.svg' />");
            } else if (progress >= 5 && progress < 10) {

                t.$containerAnimation.empty();

                localStorage.setItem("flower-animation", "done");

                var animationData = { "v": "5.1.16", "fr": 25, "ip": 0, "op": 175, "w": 375, "h": 682, "nm": "Composition 1", "ddd": 0, "assets": [{ "id": "image_0", "w": 980, "h": 561, "u": "img/animation/images/", "p": "img_0.png", "e": 0 }, { "id": "image_1", "w": 1105, "h": 934, "u": "img/animation/images/", "p": "img_1.png", "e": 0 }, { "id": "image_2", "w": 583, "h": 895, "u": "img/animation/images/", "p": "img_2.png", "e": 0 }, { "id": "comp_0", "layers": [{ "ddd": 0, "ind": 1, "ty": 2, "nm": "Fichier 2.png", "cl": "png", "refId": "image_0", "sr": 1, "ks": { "o": { "a": 0, "k": 100, "ix": 11 }, "r": { "a": 0, "k": 0, "ix": 10 }, "p": { "a": 0, "k": [187.5, 341, 0], "ix": 2 }, "a": { "a": 1, "k": [{ "i": { "x": 0.833, "y": 0.833 }, "o": { "x": 0.167, "y": 0.167 }, "n": "0p833_0p833_0p167_0p167", "t": 0, "s": [490, 280.5, 0], "e": [490, 280.5, 0], "to": [0, 0, 0], "ti": [0, 0, 0] }, { "t": 40 }], "ix": 1 }, "s": { "a": 0, "k": [12.121, 12.121, 100], "ix": 6 } }, "ao": 0, "ef": [{ "ty": 5, "nm": "Marionnette", "np": 6, "mn": "ADBE FreePin3", "ix": 1, "en": 1, "ef": [{ "ty": 7, "nm": "Moteur de marionnette", "mn": "ADBE FreePin3 Puppet Engine", "ix": 1, "v": { "a": 0, "k": 1, "ix": 1 } }, { "ty": 0, "nm": "Amélioration rotation filet", "mn": "ADBE FreePin3 Auto Rotate Pins", "ix": 2, "v": { "a": 0, "k": 20, "ix": 2 } }, { "ty": 7, "nm": "Sur le transparent", "mn": "ADBE FreePin3 On Transparent", "ix": 3, "v": { "a": 0, "k": 0, "ix": 3 } }] }], "ip": 0, "op": 175, "st": 0, "bm": 0 }, { "ddd": 0, "ind": 2, "ty": 2, "nm": "Fichier 4.png", "cl": "png", "refId": "image_1", "sr": 1, "ks": { "o": { "a": 0, "k": 100, "ix": 11 }, "r": { "a": 0, "k": 0, "ix": 10 }, "p": { "a": 0, "k": [196, 414.5, 0], "ix": 2 }, "a": { "a": 0, "k": [552.5, 467, 0], "ix": 1 }, "s": { "a": 0, "k": [12.121, 12.121, 100], "ix": 6 } }, "ao": 0, "ip": 0, "op": 175, "st": 0, "bm": 0 }, { "ddd": 0, "ind": 3, "ty": 2, "nm": "Fichier 3.png", "cl": "png", "refId": "image_2", "sr": 1, "ks": { "o": { "a": 0, "k": 100, "ix": 11 }, "r": { "a": 0, "k": 0, "ix": 10 }, "p": { "a": 1, "k": [{ "i": { "x": 0.833, "y": 0.833 }, "o": { "x": 0.167, "y": 0.167 }, "n": "0p833_0p833_0p167_0p167", "t": 0, "s": [205, 398, 0], "e": [205, 392, 0], "to": [0, -1, 0], "ti": [-2.66666674613953, 15.25, 0] }, { "i": { "x": 0.833, "y": 0.833 }, "o": { "x": 0.167, "y": 0.167 }, "n": "0p833_0p833_0p167_0p167", "t": 43, "s": [205, 392, 0], "e": [221, 306.5, 0], "to": [2.66666674613953, -15.25, 0], "ti": [-2.66666674613953, 14.25, 0] }, { "t": 93 }], "ix": 2 }, "a": { "a": 0, "k": [291.5, 447.5, 0], "ix": 1 }, "s": { "a": 0, "k": [12.121, 12.121, 100], "ix": 6 } }, "ao": 0, "ef": [{ "ty": 5, "nm": "Marionnette", "np": 6, "mn": "ADBE FreePin3", "ix": 1, "en": 1, "ef": [{ "ty": 7, "nm": "Moteur de marionnette", "mn": "ADBE FreePin3 Puppet Engine", "ix": 1, "v": { "a": 0, "k": 1, "ix": 1 } }, { "ty": 0, "nm": "Amélioration rotation filet", "mn": "ADBE FreePin3 Auto Rotate Pins", "ix": 2, "v": { "a": 0, "k": 20, "ix": 2 } }, { "ty": 7, "nm": "Sur le transparent", "mn": "ADBE FreePin3 On Transparent", "ix": 3, "v": { "a": 0, "k": 0, "ix": 3 } }] }], "ip": 0, "op": 175, "st": 0, "bm": 0 }] }], "layers": [{ "ddd": 0, "ind": 1, "ty": 0, "nm": "Précomp. 1", "refId": "comp_0", "sr": 1, "ks": { "o": { "a": 0, "k": 100, "ix": 11 }, "r": { "a": 0, "k": 0, "ix": 10 }, "p": { "a": 0, "k": [187.5, 341, 0], "ix": 2 }, "a": { "a": 0, "k": [187.5, 341, 0], "ix": 1 }, "s": { "a": 0, "k": [100, 100, 100], "ix": 6 } }, "ao": 0, "w": 375, "h": 682, "ip": 0, "op": 175, "st": 0, "bm": 0 }], "markers": [] };

                var $container = document.getElementById('flower');

                if (!localStorage.getItem("flower-animation")) {

                    TM.to($($container).find('img'), 0.25, { opacity: 0, ease: Power4.easeOut, onComplete: function onComplete() {

                            $($container).empty();

                            var params = {
                                container: $container,
                                renderer: 'svg',
                                loop: false,
                                autoplay: false,
                                animationData: animationData
                            };

                            var anim = lottie.loadAnimation(params);

                            $($container).find("svg").css("transform", "scale(3.5) translateY(19px)");

                            anim.play();

                            anim.addEventListener("enterFrame", function (animation) {
                                if (animation.currentTime > anim.totalFrames - 1) anim.pause();
                            });
                        }
                    });
                } else {

                    var params = {
                        container: $container,
                        renderer: 'svg',
                        loop: false,
                        autoplay: false,
                        animationData: animationData
                    };

                    t.anim = lottie.loadAnimation(params);

                    $($container).find("svg").css("transform", "scale(3.5) translateY(19px)");

                    t.anim.play();

                    t.anim.addEventListener("enterFrame", function (animation) {
                        if (animation.currentTime > t.anim.totalFrames - 1) t.anim.pause();
                    });
                }

                t.$containerAnimation.on("click", function () {
                    t.anim.stop();
                    t.anim.play(0);
                });
            } else if (progress >= 10 && progress < 15) {

                t.$containerAnimation.empty();

                t.$containerAnimation.append("<img src='img/animation/etat3.svg' />");
            } else {

                t.$containerAnimation.empty();
                t.$containerAnimation.append("<img src='img/animation/etat4.svg' />");
            }
        }
    }, {
        key: "openCom",
        value: function openCom(id) {
            var t = this;

            var $element = $("#" + id);

            // calcul sa taille
            TM.set($element, { opacity: 0 });
            $element.show();

            var elementH = $element.innerHeight() + 1;

            // prépare les élément pour l'animation
            TM.set($element.find(".to-animate"), { y: 20, opacity: 0 });
            TM.set($element, { height: 0 });
            TM.set($element, { opacity: 1 });

            // lance l'animation
            var timeline = new TL({
                paused: true,
                onComplete: function onComplete() {

                    $element.addClass("open");
                }
            });

            timeline.to($element, 1, { height: elementH, ease: Power4.easeOut });

            timeline.staggerTo($element.find(".to-animate"), 0.5, { y: 0, opacity: 1, ease: Power4.easeOut }, 0.1, "-=0.25");

            timeline.play(0);
        }
    }, {
        key: "swipeComm",
        value: function swipeComm(direction) {
            var t = this;

            // prépare les élément pour l'animation
            var $current = $('.commercant.open');

            // trouve l'index du current
            var currentIndex = null;

            if ($current.attr("id") === "comm1") currentIndex = 0;else if ($current.attr("id") === "comm2") currentIndex = 1;else currentIndex = 2;

            // trouve l'index du suivant
            var nextIndex = null;

            if (direction === -1) nextIndex = currentIndex === 0 ? 2 : currentIndex - 1;else nextIndex = currentIndex === 2 ? 0 : currentIndex + 1;

            var $next = $('#' + t.comm[nextIndex]);

            // prépare animation
            TM.set($next.find('.to-animate'), { y: 20, opacity: 0 });

            // lance l'animation
            var timeline = new TL({
                paused: true,
                onComplete: function onComplete() {

                    $current.hide();

                    TM.set($current.find('.to-animate'), { opacity: 1, y: 0 });

                    $current.removeClass("open");
                    $next.addClass("open");
                }
            });

            timeline.staggerTo($current.find('.to-animate'), 0.5, { opacity: 0, y: 20, ease: Power4.easeOut }, 0.10, "-=0.25", function () {
                $next.show();
            });

            timeline.staggerTo($next.find('.to-animate'), 0.5, { opacity: 1, y: 0, ease: Power4.easeOut }, 0.10, "-=0.25");

            timeline.play(0);
        }
    }, {
        key: "showContentBurger",
        value: function showContentBurger($next) {
            var t = this;

            t.isAnimating = true;

            var nextIndex = $next.index();
            var $nextContent = t.$burgerContent.eq(nextIndex);

            var $current = $(".burger__item.selected");
            var currentIndex = $current.index();

            var $currentContent = t.$burgerContent.eq(currentIndex);

            // prépare l'animation
            TM.set($nextContent.find('.to-animate'), { opacity: 0, y: 20 });
            TM.set($nextContent, { opacity: 1, zIndex: 0 });
            $nextContent.show();

            // si culture : fond gris
            if (nextIndex === 2) TM.to(t.$burger, 0.5, { backgroundColor: "#F3F3F3" });else TM.to(t.$burger, 0.5, { backgroundColor: "white" });

            // lance l'animation
            var timeline = new TL({
                paused: true,
                onStart: function onStart() {

                    $current.removeClass("selected");
                    $next.addClass("selected");
                },
                onComplete: function onComplete() {

                    $currentContent.hide();
                    t.isAnimating = false;
                }
            });

            timeline.staggerTo($currentContent.find('.to-animate'), 0.5, { opacity: 0, y: 20, ease: Power4.easeOut }, 0.10, "-=0.25");

            timeline.staggerTo($nextContent.find('.to-animate'), 0.5, { opacity: 1, y: 0, ease: Power4.easeOut }, 0.10, "-=0.25");

            // remonte en haut si besoin
            if (t.$burgerContentContainer.scrollTop() === 0) timeline.play(0);else {
                TM.to(t.$burgerContentContainer, 0.25, { scrollTop: 0, onComplete: function onComplete() {
                        setTimeout(function () {
                            timeline.play(0);
                        }, 100);
                    } });
            }
        }
    }, {
        key: "round",
        value: function round(number) {
            var t = this;

            var numberRouned = Math.round(number * 100) / 100;

            var numberK = null;
            var numberS = null;
            var numberR = null;
            var numberCut = null;

            if (numberRouned >= 10000) {

                numberK = numberRouned / 1000;

                numberS = numberK.toString();

                numberR = numberS.replace(".", "K");

                var indexK = numberR.indexOf("K");

                numberCut = numberR.slice(0, indexK + 1);
            }

            return numberCut !== null ? numberCut : numberRouned;
        }
    }, {
        key: "removeKNumber",
        value: function removeKNumber(number) {
            var t = this;

            return Number(number.replace("K", ".") * 1000);
        }
    }, {
        key: "resetApp",
        value: function resetApp() {
            var t = this;

            localStorage.clear();

            App.quickActions();

            document.location.href = "index.html";
        }
    }]);

    return Main;
}();
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Map = function () {
    function Map($container) {
        _classCallCheck(this, Map);

        var t = this;

        t.$ = $container;
        t.center = { lat: 48.8839056, lng: 2.3799738 };
        t.$containerBoxes = $('.screen-map__boxes-container');

        var marge = $(window).innerWidth() * 0.05;

        t.markers = [{
            lat: 48.8861985,
            lng: 2.3841098,
            title: "Bio c'Bon",
            id: 0,
            scroll: 0
        }, {
            lat: 48.8838852,
            lng: 2.3751905,
            title: "Naturalia",
            id: 1,
            scroll: 150 + marge
        }, {
            lat: 48.885463,
            lng: 2.37539,
            title: "Canal Bio",
            id: 2,
            scroll: 300 + 2 * marge
        }];

        t.markersB = [{
            lat: 48.882196,
            lng: 2.371512
        }, {
            lat: 48.8851748,
            lng: 2.3786695
        }, {
            lat: 48.882387,
            lng: 2.379991
        }];

        t.init();
    }

    _createClass(Map, [{
        key: "init",
        value: function init() {
            var t = this;

            t.createMap();
            t.createMarkers();
        }
    }, {
        key: "createMap",
        value: function createMap() {
            var t = this;

            t.GoogleMap = new google.maps.Map(t.$[0], {
                center: t.center,
                zoom: 15,
                disableDefaultUI: true
            });
        }
    }, {
        key: "createMarkers",
        value: function createMarkers() {
            var t = this;

            var iconeLink = "http://charline-laporte.fr/areka/marker.png";
            var iconeBin = "http://charline-laporte.fr/areka/bin.png";

            var _loop = function _loop(marker) {

                var position = {
                    lat: Number(marker.lat),
                    lng: Number(marker.lng)
                };

                var markerGoogle = new google.maps.Marker({
                    position: position,
                    map: t.GoogleMap,
                    icon: iconeLink
                });

                var id = marker.id;

                markerGoogle.addListener('click', function () {
                    t.clickMarker(id);
                    t.GoogleMap.panTo(markerGoogle.getPosition());
                });
            };

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = t.markers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var marker = _step.value;

                    _loop(marker);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = t.markersB[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var marker = _step2.value;


                    var position = {
                        lat: Number(marker.lat),
                        lng: Number(marker.lng)
                    };

                    var _markerGoogle = new google.maps.Marker({
                        position: position,
                        map: t.GoogleMap,
                        icon: iconeBin
                    });
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    }, {
        key: "clickMarker",
        value: function clickMarker(index) {
            var t = this;

            var scrollValue = t.markers[index].scroll;

            t.$containerBoxes.animate({ scrollLeft: scrollValue }, 500);
        }
    }, {
        key: "resetMap",
        value: function resetMap() {
            var t = this;

            t.GoogleMap.panTo(t.center);
        }
    }, {
        key: "resetScroll",
        value: function resetScroll() {
            var t = this;

            t.$containerBoxes.animate({ scrollLeft: 0 }, 0);
        }
    }]);

    return Map;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Popup = function () {
    function Popup($popup, g) {
        _classCallCheck(this, Popup);

        var t = this;

        t.$ = $popup;
        t.$close = t.$.find('.close');
        t.$toAnimate = t.$.find('.to-animate');

        t.gram = g;

        t.bindEvents();
        t.open();
    }

    _createClass(Popup, [{
        key: 'bindEvents',
        value: function bindEvents() {
            var t = this;

            t.$close.on('click', t.close.bind(t));
        }
    }, {
        key: 'open',
        value: function open() {
            var t = this;

            // prépare la pop up
            t.$.css('display', 'block');

            TM.set(t.$, { opacity: 0 });
            TM.set(t.$toAnimate, { opacity: 0, y: 20 });

            // prépare la timeline
            var timeline = new TL({ paused: true });

            timeline.to(t.$, 0.5, { opacity: 1, ease: Power4.easeOut });

            timeline.staggerTo(t.$toAnimate, 0.5, { opacity: 1, y: 0, ease: Power4.easeOut }, 0.1, "-=0.25");

            timeline.play(0);
        }
    }, {
        key: 'close',
        value: function close() {
            var t = this;

            // prépare la timeline
            var timeline = new TL({
                paused: true,
                onComplete: function onComplete() {

                    t.$.css('display', 'none');

                    TM.set(t.$close, { rotation: 0 });

                    if (t.gram) {

                        // mini délai pour bien voir les animations
                        setTimeout(function () {
                            app.Main.updateProgress(t.gram);
                        }, 250);
                    }
                }
            });

            timeline.staggerTo(t.$toAnimate, 0.5, { opacity: 0, y: 20, ease: Power4.easeOut }, 0.1, "-=0.25");

            timeline.to(t.$, 1, { opacity: 0, ease: Power4.easeOut }, "-=0.25");

            if (t.$.find('.cross.close').length >= 1) timeline.to(t.$close, 1, { rotation: 180, ease: Power4.easeOut }, 0);

            timeline.play(0);
        }
    }]);

    return Popup;
}();
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SingleCommercant = function () {
    function SingleCommercant($page) {
        _classCallCheck(this, SingleCommercant);

        var t = this;

        t.$ = $page;
        t.pages = ["comm1", "comm2", "comm3"];
        t.current = t.$.parent(".commercant").attr("data-id");

        t.$close = t.$.find('.close');

        t.$transition = $("#transition");
        t.$wrapper = $("#wrapper");

        t.$like = $(".page-comm__like");

        t.bindEvents();
    }

    _createClass(SingleCommercant, [{
        key: "bindEvents",
        value: function bindEvents() {
            var t = this;

            // close
            t.$close.on('click', t.close.bind(t));

            // like
            t.$like.on('click', t.like.bind(t));
        }
    }, {
        key: "close",
        value: function close() {
            var t = this;

            var $element = t.$.parents(".commercant");

            $element.hide();

            TM.set($element, { height: "auto" });

            $element.removeClass("open");
        }
    }, {
        key: "like",
        value: function like() {
            var t = this;

            if (t.$like.find('svg').hasClass('liked')) {

                t.$like.find('svg').removeClass('liked');
                TM.to(t.$like.find('svg'), 0.25, { scale: 1 });
            } else {

                t.$like.find('svg').addClass('liked');

                TM.to(t.$like.find('svg'), 0.75, { scale: 1.1, ease: Elastic.easeOut.config(2.5, 0.5) });
            }
        }
    }]);

    return SingleCommercant;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var planteSliderIllu = function () {
    function planteSliderIllu() {
        _classCallCheck(this, planteSliderIllu);

        var t = this;

        t.$buttons = $('.plante-screen-touch');
        t.nbSlides = 3;

        t.bindEvents();
    }

    _createClass(planteSliderIllu, [{
        key: 'bindEvents',
        value: function bindEvents() {
            var t = this;

            t.$buttons.on('click', t.slide.bind(t));
        }
    }, {
        key: 'slide',
        value: function slide(event) {
            var t = this;

            // ce que je manipule
            var $element = $(event.target).hasClass("table-graines__touch") ? $(event.target) : $(event.target).parents(".table-graines__touch");

            var nextIndexElement = $element.index() < 3 ? $element.index() + 1 : 0;
            var $nextElement = $element.parents('.table-graines__container-touch').find('.table-graines__touch').eq(nextIndexElement);

            // prépare la timeline
            var timeline = new TL({
                paused: true,
                onComplete: function onComplete() {

                    console.log('complete');
                    TM.set($element, { bottom: 85, opacity: 0 });
                }
            });

            // animation
            timeline.to($element, 0.5, { bottom: -85, opacity: 0, ease: Power4.easeOut });
            timeline.to($nextElement, 0.5, { bottom: 0, opacity: 1, ease: Elastic.easeOut.config(1, 1) });

            timeline.play(0);
        }
    }]);

    return planteSliderIllu;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var App = function () {
    function App() {
        _classCallCheck(this, App);

        var t = this;

        t.$transition = $("#transition");

        // TODO : passer par le device ready lors build
        t.bindEvents();
        // t.init()
    }

    _createClass(App, [{
        key: 'bindEvents',
        value: function bindEvents() {
            var t = this;

            document.addEventListener('deviceready', t.init.bind(t));
        }
    }, {
        key: 'init',
        value: function init() {
            var t = this;

            t.transformSvgImg();
            t.isPage();
            t.newPage();
        }
    }, {
        key: 'isPage',
        value: function isPage() {
            var t = this;

            t.isLogin = $('#tpl-login').length > 0;
            t.isMain = $('#tpl-main').length > 0;
        }
    }, {
        key: 'newPage',
        value: function newPage() {
            var t = this;

            if (t.isLogin) new Login($('#tpl-login'));

            if (t.isMain) app.Main = new Main($('#tpl-main'));
        }
    }, {
        key: 'transformSvgImg',
        value: function transformSvgImg() {

            $('img.svg').each(function () {

                var $img = $(this),
                    imgID = $img.attr('id'),
                    imgClass = $img.attr('class'),
                    imgURL = $img.attr('src');

                $.get(imgURL, function (data) {
                    var $svg = $(data).find('svg');
                    if (typeof imgID !== 'undefined') {
                        $svg = $svg.attr('id', imgID);
                    }
                    if (typeof imgClass !== 'undefined') {
                        $svg = $svg.attr('class', imgClass + ' replaced-svg');
                    }
                    $svg = $svg.removeAttr('xmlns:a');
                    $img.replaceWith($svg);
                }, 'xml');
            });
        }
    }], [{
        key: 'quickActions',
        value: function quickActions() {

            var sizes = ["0.2cm", "5.2cm", "7.3cm", "8.1cm"];
            var lastDay = localStorage.getItem("flower-last-day") ? localStorage.getItem("flower-last-day") : "Pas de dépose";

            var nbSize = localStorage.getItem("flower-level") ? Number(localStorage.getItem("flower-level")) : 0;
            var indexSize = Math.trunc(nbSize / 5);

            ThreeDeeTouch.configureQuickActions([{
                title: "Je vais bien !",
                subtitle: "Je mesure " + sizes[indexSize],
                iconType: 'message'
            }, {
                title: 'Dernière dépose',
                subtitle: lastDay,
                iconType: 'date'
            }]);
        }
    }]);

    return App;
}();

var TM = TweenMax;
var TL = TimelineMax;

var app = {};
new App();